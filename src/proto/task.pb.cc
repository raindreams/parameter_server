// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManageNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManageNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManageNode_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ManageApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManageApp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManageApp_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallSharedPara_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallSharedPara_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CallSketch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallSketch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CallSketch_Command_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SketchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SketchResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftask_2eproto() {
  protobuf_AddDesc_proto_2ftask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, customer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, has_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, uncompressed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, mng_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, mng_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, shared_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, risk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sketch_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Task_Type_descriptor_ = Task_descriptor_->enum_type(0);
  ManageNode_descriptor_ = file->message_type(1);
  static const int ManageNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, nodes_),
  };
  ManageNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManageNode_descriptor_,
      ManageNode::default_instance_,
      ManageNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManageNode));
  ManageNode_Command_descriptor_ = ManageNode_descriptor_->enum_type(0);
  ManageApp_descriptor_ = file->message_type(2);
  static const int ManageApp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, app_config_),
  };
  ManageApp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManageApp_descriptor_,
      ManageApp::default_instance_,
      ManageApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManageApp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManageApp));
  ManageApp_Command_descriptor_ = ManageApp_descriptor_->enum_type(0);
  Timestamp_descriptor_ = file->message_type(3);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, time_),
  };
  Timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamp));
  CallSharedPara_descriptor_ = file->message_type(4);
  static const int CallSharedPara_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, backup_),
  };
  CallSharedPara_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallSharedPara_descriptor_,
      CallSharedPara::default_instance_,
      CallSharedPara_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSharedPara, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallSharedPara));
  CallSharedPara_Command_descriptor_ = CallSharedPara_descriptor_->enum_type(0);
  CallSketch_descriptor_ = file->message_type(5);
  static const int CallSketch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSketch, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSketch, key_),
  };
  CallSketch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallSketch_descriptor_,
      CallSketch::default_instance_,
      CallSketch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSketch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallSketch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallSketch));
  CallSketch_Command_descriptor_ = CallSketch_descriptor_->enum_type(0);
  SketchResponse_descriptor_ = file->message_type(6);
  static const int SketchResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, process_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, key_),
  };
  SketchResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SketchResponse_descriptor_,
      SketchResponse::default_instance_,
      SketchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SketchResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SketchResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManageNode_descriptor_, &ManageNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManageApp_descriptor_, &ManageApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallSharedPara_descriptor_, &CallSharedPara::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallSketch_descriptor_, &CallSketch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SketchResponse_descriptor_, &SketchResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftask_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete ManageNode::default_instance_;
  delete ManageNode_reflection_;
  delete ManageApp::default_instance_;
  delete ManageApp_reflection_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete CallSharedPara::default_instance_;
  delete CallSharedPara_reflection_;
  delete CallSketch::default_instance_;
  delete CallSketch_reflection_;
  delete SketchResponse::default_instance_;
  delete SketchResponse_reflection_;
}

void protobuf_AddDesc_proto_2ftask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_proto_2fnode_2eproto();
  ::PS::protobuf_AddDesc_proto_2frange_2eproto();
  ::PS::protobuf_AddDesc_proto_2fconfig_2eproto();
  ::PS::protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020proto/task.proto\022\002PS\032\020proto/node.proto"
    "\032\021proto/range.proto\032\022proto/config.proto\032"
    "\035proto/risk_minimization.proto\"\203\004\n\004Task\022"
    "\033\n\004type\030\001 \002(\0162\r.PS.Task.Type\022\026\n\007request\030"
    "\002 \002(\010:\005false\022\020\n\010customer\030\003 \002(\t\022\014\n\004time\030\004"
    " \001(\005\022\025\n\twait_time\030\005 \001(\005:\002-1\022\023\n\010priority\030"
    "\006 \001(\005:\0010\022\026\n\007has_key\030\007 \001(\010:\005false\022\036\n\tkey_"
    "range\030\010 \001(\0132\013.PS.PbRange\022\025\n\rkey_signatur"
    "e\030\t \001(\r\022\031\n\021uncompressed_size\030\n \003(\004\022\013\n\003ms"
    "g\030e \001(\014\022 \n\010mng_node\030f \001(\0132\016.PS.ManageNod"
    "e\022\036\n\007mng_app\030g \001(\0132\r.PS.ManageApp\022(\n\013sha"
    "red_para\030\311\001 \001(\0132\022.PS.CallSharedPara\022\036\n\004r"
    "isk\030\255\002 \001(\0132\017.PS.RiskMinCall\022\037\n\006sketch\030\256\002"
    " \001(\0132\016.PS.CallSketch\"V\n\004Type\022\r\n\tTERMINAT"
    "E\020\001\022\025\n\021TERMINATE_CONFIRM\020\002\022\t\n\005REPLY\020\003\022\n\n"
    "\006MANAGE\020\004\022\021\n\rCALL_CUSTOMER\020\005\"x\n\nManageNo"
    "de\022#\n\003cmd\030\001 \002(\0162\026.PS.ManageNode.Command\022"
    "\027\n\005nodes\030\002 \003(\0132\010.PS.Node\",\n\007Command\022\010\n\004I"
    "NIT\020\001\022\013\n\007REPLACE\020\002\022\n\n\006REMOVE\020\003\"r\n\tManage"
    "App\022\"\n\003cmd\030\001 \002(\0162\025.PS.ManageApp.Command\022"
    "!\n\napp_config\030\002 \002(\0132\r.PS.AppConfig\"\036\n\007Co"
    "mmand\022\007\n\003ADD\020\001\022\n\n\006REMOVE\020\002\")\n\tTimestamp\022"
    "\016\n\006sender\030\001 \002(\t\022\014\n\004time\030\002 \002(\005\"\233\001\n\016CallSh"
    "aredPara\022\'\n\003cmd\030\001 \002(\0162\032.PS.CallSharedPar"
    "a.Command\022\035\n\006backup\030\006 \003(\0132\r.PS.Timestamp"
    "\"A\n\007Command\022\010\n\004PUSH\020\001\022\010\n\004PULL\020\002\022\020\n\014PUSH_"
    "REPLICA\020\003\022\020\n\014PULL_REPLICA\020\004\"\251\001\n\nCallSket"
    "ch\022#\n\003cmd\030\001 \002(\0162\026.PS.CallSketch.Command\022"
    "\030\n\003key\030\002 \001(\0132\013.PS.PbRange\"\\\n\007Command\022\020\n\014"
    "PREPARE_DATA\020\001\022\017\n\013INSERT_DATA\020\002\022\021\n\rEVAL_"
    "PROGRESS\020\003\022\016\n\nQUERY_DATA\020\004\022\013\n\007RECOVER\020\005\""
    "T\n\016SketchResponse\022\016\n\006nodeid\030\001 \001(\t\022\024\n\014pro"
    "cess_time\030\002 \001(\001\022\017\n\007payload\030\003 \001(\r\022\013\n\003key\030"
    "\004 \001(\r", 1325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  ManageNode::default_instance_ = new ManageNode();
  ManageApp::default_instance_ = new ManageApp();
  Timestamp::default_instance_ = new Timestamp();
  CallSharedPara::default_instance_ = new CallSharedPara();
  CallSketch::default_instance_ = new CallSketch();
  SketchResponse::default_instance_ = new SketchResponse();
  Task::default_instance_->InitAsDefaultInstance();
  ManageNode::default_instance_->InitAsDefaultInstance();
  ManageApp::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  CallSharedPara::default_instance_->InitAsDefaultInstance();
  CallSketch::default_instance_->InitAsDefaultInstance();
  SketchResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftask_2eproto {
  StaticDescriptorInitializer_proto_2ftask_2eproto() {
    protobuf_AddDesc_proto_2ftask_2eproto();
  }
} static_descriptor_initializer_proto_2ftask_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Task_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Type_descriptor_;
}
bool Task_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_Type Task::TERMINATE;
const Task_Type Task::TERMINATE_CONFIRM;
const Task_Type Task::REPLY;
const Task_Type Task::MANAGE;
const Task_Type Task::CALL_CUSTOMER;
const Task_Type Task::Type_MIN;
const Task_Type Task::Type_MAX;
const int Task::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Task::kTypeFieldNumber;
const int Task::kRequestFieldNumber;
const int Task::kCustomerFieldNumber;
const int Task::kTimeFieldNumber;
const int Task::kWaitTimeFieldNumber;
const int Task::kPriorityFieldNumber;
const int Task::kHasKeyFieldNumber;
const int Task::kKeyRangeFieldNumber;
const int Task::kKeySignatureFieldNumber;
const int Task::kUncompressedSizeFieldNumber;
const int Task::kMsgFieldNumber;
const int Task::kMngNodeFieldNumber;
const int Task::kMngAppFieldNumber;
const int Task::kSharedParaFieldNumber;
const int Task::kRiskFieldNumber;
const int Task::kSketchFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
  key_range_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
  mng_node_ = const_cast< ::PS::ManageNode*>(&::PS::ManageNode::default_instance());
  mng_app_ = const_cast< ::PS::ManageApp*>(&::PS::ManageApp::default_instance());
  shared_para_ = const_cast< ::PS::CallSharedPara*>(&::PS::CallSharedPara::default_instance());
  risk_ = const_cast< ::PS::RiskMinCall*>(&::PS::RiskMinCall::default_instance());
  sketch_ = const_cast< ::PS::CallSketch*>(&::PS::CallSketch::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  request_ = false;
  customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  wait_time_ = -1;
  priority_ = 0;
  has_key_ = false;
  key_range_ = NULL;
  key_signature_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mng_node_ = NULL;
  mng_app_ = NULL;
  shared_para_ = NULL;
  risk_ = NULL;
  sketch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete key_range_;
    delete mng_node_;
    delete mng_app_;
    delete shared_para_;
    delete risk_;
    delete sketch_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    request_ = false;
    if (has_customer()) {
      if (customer_ != &::google::protobuf::internal::kEmptyString) {
        customer_->clear();
      }
    }
    time_ = 0;
    wait_time_ = -1;
    priority_ = 0;
    has_key_ = false;
    if (has_key_range()) {
      if (key_range_ != NULL) key_range_->::PS::PbRange::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    key_signature_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_mng_node()) {
      if (mng_node_ != NULL) mng_node_->::PS::ManageNode::Clear();
    }
    if (has_mng_app()) {
      if (mng_app_ != NULL) mng_app_->::PS::ManageApp::Clear();
    }
    if (has_shared_para()) {
      if (shared_para_ != NULL) shared_para_->::PS::CallSharedPara::Clear();
    }
    if (has_risk()) {
      if (risk_ != NULL) risk_->::PS::RiskMinCall::Clear();
    }
    if (has_sketch()) {
      if (sketch_ != NULL) sketch_->::PS::CallSketch::Clear();
    }
  }
  uncompressed_size_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.Task.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::Task_Type_IsValid(value)) {
            set_type(static_cast< ::PS::Task_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request;
        break;
      }

      // required bool request = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_customer;
        break;
      }

      // required string customer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->customer().data(), this->customer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wait_time;
        break;
      }

      // optional int32 wait_time = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_time_)));
          set_has_wait_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional int32 priority = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_key;
        break;
      }

      // optional bool has_key = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_key_)));
          set_has_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_key_range;
        break;
      }

      // optional .PS.PbRange key_range = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_key_signature;
        break;
      }

      // optional uint32 key_signature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_signature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_signature_)));
          set_has_key_signature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uncompressed_size;
        break;
      }

      // repeated uint64 uncompressed_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncompressed_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_uncompressed_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uncompressed_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_uncompressed_size;
        if (input->ExpectTag(810)) goto parse_msg;
        break;
      }

      // optional bytes msg = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_mng_node;
        break;
      }

      // optional .PS.ManageNode mng_node = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mng_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mng_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_mng_app;
        break;
      }

      // optional .PS.ManageApp mng_app = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mng_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mng_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_shared_para;
        break;
      }

      // optional .PS.CallSharedPara shared_para = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shared_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_para()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2410)) goto parse_risk;
        break;
      }

      // optional .PS.RiskMinCall risk = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_risk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_risk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2418)) goto parse_sketch;
        break;
      }

      // optional .PS.CallSketch sketch = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sketch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.Task.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool request = 2 [default = false];
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request(), output);
  }

  // required string customer = 3;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->customer(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 wait_time = 5 [default = -1];
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wait_time(), output);
  }

  // optional int32 priority = 6 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // optional bool has_key = 7 [default = false];
  if (has_has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_key(), output);
  }

  // optional .PS.PbRange key_range = 8;
  if (has_key_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->key_range(), output);
  }

  // optional uint32 key_signature = 9;
  if (has_key_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->key_signature(), output);
  }

  // repeated uint64 uncompressed_size = 10;
  for (int i = 0; i < this->uncompressed_size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->uncompressed_size(i), output);
  }

  // optional bytes msg = 101;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      101, this->msg(), output);
  }

  // optional .PS.ManageNode mng_node = 102;
  if (has_mng_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->mng_node(), output);
  }

  // optional .PS.ManageApp mng_app = 103;
  if (has_mng_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->mng_app(), output);
  }

  // optional .PS.CallSharedPara shared_para = 201;
  if (has_shared_para()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->shared_para(), output);
  }

  // optional .PS.RiskMinCall risk = 301;
  if (has_risk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->risk(), output);
  }

  // optional .PS.CallSketch sketch = 302;
  if (has_sketch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->sketch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.Task.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bool request = 2 [default = false];
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request(), target);
  }

  // required string customer = 3;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->customer().data(), this->customer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->customer(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 wait_time = 5 [default = -1];
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wait_time(), target);
  }

  // optional int32 priority = 6 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // optional bool has_key = 7 [default = false];
  if (has_has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_key(), target);
  }

  // optional .PS.PbRange key_range = 8;
  if (has_key_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->key_range(), target);
  }

  // optional uint32 key_signature = 9;
  if (has_key_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->key_signature(), target);
  }

  // repeated uint64 uncompressed_size = 10;
  for (int i = 0; i < this->uncompressed_size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->uncompressed_size(i), target);
  }

  // optional bytes msg = 101;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        101, this->msg(), target);
  }

  // optional .PS.ManageNode mng_node = 102;
  if (has_mng_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->mng_node(), target);
  }

  // optional .PS.ManageApp mng_app = 103;
  if (has_mng_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->mng_app(), target);
  }

  // optional .PS.CallSharedPara shared_para = 201;
  if (has_shared_para()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->shared_para(), target);
  }

  // optional .PS.RiskMinCall risk = 301;
  if (has_risk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->risk(), target);
  }

  // optional .PS.CallSketch sketch = 302;
  if (has_sketch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->sketch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.Task.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool request = 2 [default = false];
    if (has_request()) {
      total_size += 1 + 1;
    }

    // required string customer = 3;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customer());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 wait_time = 5 [default = -1];
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_time());
    }

    // optional int32 priority = 6 [default = 0];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional bool has_key = 7 [default = false];
    if (has_has_key()) {
      total_size += 1 + 1;
    }

    // optional .PS.PbRange key_range = 8;
    if (has_key_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_range());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 key_signature = 9;
    if (has_key_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key_signature());
    }

    // optional bytes msg = 101;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .PS.ManageNode mng_node = 102;
    if (has_mng_node()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mng_node());
    }

    // optional .PS.ManageApp mng_app = 103;
    if (has_mng_app()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mng_app());
    }

    // optional .PS.CallSharedPara shared_para = 201;
    if (has_shared_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shared_para());
    }

    // optional .PS.RiskMinCall risk = 301;
    if (has_risk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->risk());
    }

    // optional .PS.CallSketch sketch = 302;
    if (has_sketch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sketch());
    }

  }
  // repeated uint64 uncompressed_size = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->uncompressed_size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uncompressed_size(i));
    }
    total_size += 1 * this->uncompressed_size_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  uncompressed_size_.MergeFrom(from.uncompressed_size_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_customer()) {
      set_customer(from.customer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_wait_time()) {
      set_wait_time(from.wait_time());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_has_key()) {
      set_has_key(from.has_key());
    }
    if (from.has_key_range()) {
      mutable_key_range()->::PS::PbRange::MergeFrom(from.key_range());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key_signature()) {
      set_key_signature(from.key_signature());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_mng_node()) {
      mutable_mng_node()->::PS::ManageNode::MergeFrom(from.mng_node());
    }
    if (from.has_mng_app()) {
      mutable_mng_app()->::PS::ManageApp::MergeFrom(from.mng_app());
    }
    if (from.has_shared_para()) {
      mutable_shared_para()->::PS::CallSharedPara::MergeFrom(from.shared_para());
    }
    if (from.has_risk()) {
      mutable_risk()->::PS::RiskMinCall::MergeFrom(from.risk());
    }
    if (from.has_sketch()) {
      mutable_sketch()->::PS::CallSketch::MergeFrom(from.sketch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_key_range()) {
    if (!this->key_range().IsInitialized()) return false;
  }
  if (has_mng_node()) {
    if (!this->mng_node().IsInitialized()) return false;
  }
  if (has_mng_app()) {
    if (!this->mng_app().IsInitialized()) return false;
  }
  if (has_shared_para()) {
    if (!this->shared_para().IsInitialized()) return false;
  }
  if (has_risk()) {
    if (!this->risk().IsInitialized()) return false;
  }
  if (has_sketch()) {
    if (!this->sketch().IsInitialized()) return false;
  }
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(request_, other->request_);
    std::swap(customer_, other->customer_);
    std::swap(time_, other->time_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(priority_, other->priority_);
    std::swap(has_key_, other->has_key_);
    std::swap(key_range_, other->key_range_);
    std::swap(key_signature_, other->key_signature_);
    uncompressed_size_.Swap(&other->uncompressed_size_);
    std::swap(msg_, other->msg_);
    std::swap(mng_node_, other->mng_node_);
    std::swap(mng_app_, other->mng_app_);
    std::swap(shared_para_, other->shared_para_);
    std::swap(risk_, other->risk_);
    std::swap(sketch_, other->sketch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ManageNode_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageNode_Command_descriptor_;
}
bool ManageNode_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ManageNode_Command ManageNode::INIT;
const ManageNode_Command ManageNode::REPLACE;
const ManageNode_Command ManageNode::REMOVE;
const ManageNode_Command ManageNode::Command_MIN;
const ManageNode_Command ManageNode::Command_MAX;
const int ManageNode::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ManageNode::kCmdFieldNumber;
const int ManageNode::kNodesFieldNumber;
#endif  // !_MSC_VER

ManageNode::ManageNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManageNode::InitAsDefaultInstance() {
}

ManageNode::ManageNode(const ManageNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManageNode::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManageNode::~ManageNode() {
  SharedDtor();
}

void ManageNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManageNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManageNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageNode_descriptor_;
}

const ManageNode& ManageNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

ManageNode* ManageNode::default_instance_ = NULL;

ManageNode* ManageNode::New() const {
  return new ManageNode;
}

void ManageNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManageNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.ManageNode.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ManageNode_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::ManageNode_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .PS.Node nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManageNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.ManageNode.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated .PS.Node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManageNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.ManageNode.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated .PS.Node nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManageNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.ManageNode.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  // repeated .PS.Node nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManageNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManageNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManageNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManageNode::MergeFrom(const ManageNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManageNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageNode::CopyFrom(const ManageNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void ManageNode::Swap(ManageNode* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManageNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManageNode_descriptor_;
  metadata.reflection = ManageNode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ManageApp_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageApp_Command_descriptor_;
}
bool ManageApp_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ManageApp_Command ManageApp::ADD;
const ManageApp_Command ManageApp::REMOVE;
const ManageApp_Command ManageApp::Command_MIN;
const ManageApp_Command ManageApp::Command_MAX;
const int ManageApp::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ManageApp::kCmdFieldNumber;
const int ManageApp::kAppConfigFieldNumber;
#endif  // !_MSC_VER

ManageApp::ManageApp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManageApp::InitAsDefaultInstance() {
  app_config_ = const_cast< ::PS::AppConfig*>(&::PS::AppConfig::default_instance());
}

ManageApp::ManageApp(const ManageApp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManageApp::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  app_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManageApp::~ManageApp() {
  SharedDtor();
}

void ManageApp::SharedDtor() {
  if (this != default_instance_) {
    delete app_config_;
  }
}

void ManageApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManageApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManageApp_descriptor_;
}

const ManageApp& ManageApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

ManageApp* ManageApp::default_instance_ = NULL;

ManageApp* ManageApp::New() const {
  return new ManageApp;
}

void ManageApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_app_config()) {
      if (app_config_ != NULL) app_config_->::PS::AppConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManageApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.ManageApp.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ManageApp_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::ManageApp_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_config;
        break;
      }

      // required .PS.AppConfig app_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManageApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.ManageApp.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // required .PS.AppConfig app_config = 2;
  if (has_app_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->app_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManageApp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.ManageApp.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // required .PS.AppConfig app_config = 2;
  if (has_app_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->app_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManageApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.ManageApp.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // required .PS.AppConfig app_config = 2;
    if (has_app_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManageApp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManageApp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManageApp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManageApp::MergeFrom(const ManageApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_app_config()) {
      mutable_app_config()->::PS::AppConfig::MergeFrom(from.app_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManageApp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManageApp::CopyFrom(const ManageApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManageApp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_app_config()) {
    if (!this->app_config().IsInitialized()) return false;
  }
  return true;
}

void ManageApp::Swap(ManageApp* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(app_config_, other->app_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManageApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManageApp_descriptor_;
  metadata.reflection = ManageApp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamp::kSenderFieldNumber;
const int Timestamp::kTimeFieldNumber;
#endif  // !_MSC_VER

Timestamp::Timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New() const {
  return new Timestamp;
}

void Timestamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSharedPara_Command_descriptor_;
}
bool CallSharedPara_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CallSharedPara_Command CallSharedPara::PUSH;
const CallSharedPara_Command CallSharedPara::PULL;
const CallSharedPara_Command CallSharedPara::PUSH_REPLICA;
const CallSharedPara_Command CallSharedPara::PULL_REPLICA;
const CallSharedPara_Command CallSharedPara::Command_MIN;
const CallSharedPara_Command CallSharedPara::Command_MAX;
const int CallSharedPara::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CallSharedPara::kCmdFieldNumber;
const int CallSharedPara::kBackupFieldNumber;
#endif  // !_MSC_VER

CallSharedPara::CallSharedPara()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallSharedPara::InitAsDefaultInstance() {
}

CallSharedPara::CallSharedPara(const CallSharedPara& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallSharedPara::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallSharedPara::~CallSharedPara() {
  SharedDtor();
}

void CallSharedPara::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallSharedPara::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSharedPara::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSharedPara_descriptor_;
}

const CallSharedPara& CallSharedPara::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

CallSharedPara* CallSharedPara::default_instance_ = NULL;

CallSharedPara* CallSharedPara::New() const {
  return new CallSharedPara;
}

void CallSharedPara::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
  }
  backup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallSharedPara::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.CallSharedPara.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::CallSharedPara_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::CallSharedPara_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_backup;
        break;
      }

      // repeated .PS.Timestamp backup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_backup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallSharedPara::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.CallSharedPara.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated .PS.Timestamp backup = 6;
  for (int i = 0; i < this->backup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->backup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallSharedPara::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.CallSharedPara.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated .PS.Timestamp backup = 6;
  for (int i = 0; i < this->backup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->backup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallSharedPara::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.CallSharedPara.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  // repeated .PS.Timestamp backup = 6;
  total_size += 1 * this->backup_size();
  for (int i = 0; i < this->backup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backup(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSharedPara::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallSharedPara* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallSharedPara*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallSharedPara::MergeFrom(const CallSharedPara& from) {
  GOOGLE_CHECK_NE(&from, this);
  backup_.MergeFrom(from.backup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallSharedPara::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSharedPara::CopyFrom(const CallSharedPara& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallSharedPara::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < backup_size(); i++) {
    if (!this->backup(i).IsInitialized()) return false;
  }
  return true;
}

void CallSharedPara::Swap(CallSharedPara* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    backup_.Swap(&other->backup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallSharedPara::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallSharedPara_descriptor_;
  metadata.reflection = CallSharedPara_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CallSketch_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSketch_Command_descriptor_;
}
bool CallSketch_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CallSketch_Command CallSketch::PREPARE_DATA;
const CallSketch_Command CallSketch::INSERT_DATA;
const CallSketch_Command CallSketch::EVAL_PROGRESS;
const CallSketch_Command CallSketch::QUERY_DATA;
const CallSketch_Command CallSketch::RECOVER;
const CallSketch_Command CallSketch::Command_MIN;
const CallSketch_Command CallSketch::Command_MAX;
const int CallSketch::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CallSketch::kCmdFieldNumber;
const int CallSketch::kKeyFieldNumber;
#endif  // !_MSC_VER

CallSketch::CallSketch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallSketch::InitAsDefaultInstance() {
  key_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
}

CallSketch::CallSketch(const CallSketch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallSketch::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallSketch::~CallSketch() {
  SharedDtor();
}

void CallSketch::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void CallSketch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallSketch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallSketch_descriptor_;
}

const CallSketch& CallSketch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

CallSketch* CallSketch::default_instance_ = NULL;

CallSketch* CallSketch::New() const {
  return new CallSketch;
}

void CallSketch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_key()) {
      if (key_ != NULL) key_->::PS::PbRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallSketch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.CallSketch.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::CallSketch_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::CallSketch_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .PS.PbRange key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallSketch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.CallSketch.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallSketch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.CallSketch.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallSketch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.CallSketch.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .PS.PbRange key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallSketch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallSketch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallSketch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallSketch::MergeFrom(const CallSketch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_key()) {
      mutable_key()->::PS::PbRange::MergeFrom(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallSketch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallSketch::CopyFrom(const CallSketch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallSketch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void CallSketch::Swap(CallSketch* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallSketch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallSketch_descriptor_;
  metadata.reflection = CallSketch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SketchResponse::kNodeidFieldNumber;
const int SketchResponse::kProcessTimeFieldNumber;
const int SketchResponse::kPayloadFieldNumber;
const int SketchResponse::kKeyFieldNumber;
#endif  // !_MSC_VER

SketchResponse::SketchResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SketchResponse::InitAsDefaultInstance() {
}

SketchResponse::SketchResponse(const SketchResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SketchResponse::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_time_ = 0;
  payload_ = 0u;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SketchResponse::~SketchResponse() {
  SharedDtor();
}

void SketchResponse::SharedDtor() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (this != default_instance_) {
  }
}

void SketchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SketchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SketchResponse_descriptor_;
}

const SketchResponse& SketchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftask_2eproto();
  return *default_instance_;
}

SketchResponse* SketchResponse::default_instance_ = NULL;

SketchResponse* SketchResponse::New() const {
  return new SketchResponse;
}

void SketchResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nodeid()) {
      if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
        nodeid_->clear();
      }
    }
    process_time_ = 0;
    payload_ = 0u;
    key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SketchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nodeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_process_time;
        break;
      }

      // optional double process_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &process_time_)));
          set_has_process_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_payload;
        break;
      }

      // optional uint32 payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_)));
          set_has_payload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key;
        break;
      }

      // optional uint32 key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SketchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nodeid = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nodeid(), output);
  }

  // optional double process_time = 2;
  if (has_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->process_time(), output);
  }

  // optional uint32 payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payload(), output);
  }

  // optional uint32 key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SketchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nodeid = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }

  // optional double process_time = 2;
  if (has_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->process_time(), target);
  }

  // optional uint32 payload = 3;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->payload(), target);
  }

  // optional uint32 key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SketchResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nodeid = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodeid());
    }

    // optional double process_time = 2;
    if (has_process_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload());
    }

    // optional uint32 key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SketchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SketchResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SketchResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SketchResponse::MergeFrom(const SketchResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_process_time()) {
      set_process_time(from.process_time());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SketchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SketchResponse::CopyFrom(const SketchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SketchResponse::IsInitialized() const {

  return true;
}

void SketchResponse::Swap(SketchResponse* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    std::swap(process_time_, other->process_time_);
    std::swap(payload_, other->payload_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SketchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SketchResponse_descriptor_;
  metadata.reflection = SketchResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
