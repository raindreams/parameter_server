// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/instance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/instance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* InstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InstanceInfo_LabelType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeatureGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureGroupInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureGroupInfo_FeatureType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2finstance_2eproto() {
  protobuf_AddDesc_proto_2finstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/instance.proto");
  GOOGLE_CHECK(file != NULL);
  InstanceInfo_descriptor_ = file->message_type(0);
  static const int InstanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, label_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, all_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, individual_groups_),
  };
  InstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfo_descriptor_,
      InstanceInfo::default_instance_,
      InstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfo));
  InstanceInfo_LabelType_descriptor_ = InstanceInfo_descriptor_->enum_type(0);
  FeatureGroupInfo_descriptor_ = file->message_type(1);
  static const int FeatureGroupInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, feature_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, feature_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, feature_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, num_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, num_entries_),
  };
  FeatureGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureGroupInfo_descriptor_,
      FeatureGroupInfo::default_instance_,
      FeatureGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureGroupInfo));
  FeatureGroupInfo_FeatureType_descriptor_ = FeatureGroupInfo_descriptor_->enum_type(0);
  Instance_descriptor_ = file->message_type(2);
  static const int Instance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, feature_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, value_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2finstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfo_descriptor_, &InstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureGroupInfo_descriptor_, &FeatureGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2finstance_2eproto() {
  delete InstanceInfo::default_instance_;
  delete InstanceInfo_reflection_;
  delete FeatureGroupInfo::default_instance_;
  delete FeatureGroupInfo_reflection_;
  delete Instance::default_instance_;
  delete Instance_reflection_;
}

void protobuf_AddDesc_proto_2finstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_proto_2frange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/instance.proto\022\002PS\032\021proto/range."
    "proto\"\334\001\n\014InstanceInfo\022.\n\nlabel_type\030\001 \002"
    "(\0162\032.PS.InstanceInfo.LabelType\022\'\n\tall_gr"
    "oup\030\002 \002(\0132\024.PS.FeatureGroupInfo\022/\n\021indiv"
    "idual_groups\030\003 \003(\0132\024.PS.FeatureGroupInfo"
    "\"B\n\tLabelType\022\t\n\005EMPTY\020\001\022\n\n\006BINARY\020\002\022\016\n\n"
    "MULTICLASS\020\003\022\016\n\nCONTINUOUS\020\004\"\203\002\n\020Feature"
    "GroupInfo\022\020\n\010group_id\030\001 \002(\005\0226\n\014feature_t"
    "ype\030\002 \002(\0162 .PS.FeatureGroupInfo.FeatureT"
    "ype\022+\n\rfeature_begin\030\003 \002(\004:\024184467440737"
    "09551615\022\023\n\013feature_end\030\004 \002(\004\022\025\n\rnum_ins"
    "tances\030\005 \002(\004\022\023\n\013num_entries\030\006 \002(\004\"7\n\013Fea"
    "tureType\022\t\n\005DENSE\020\001\022\n\n\006SPARSE\020\002\022\021\n\rSPARS"
    "E_BINARY\020\003\"<\n\010Instance\022\r\n\005label\030\001 \001(\002\022\022\n"
    "\nfeature_id\030\002 \003(\003\022\r\n\005value\030\003 \003(\002", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/instance.proto", &protobuf_RegisterTypes);
  InstanceInfo::default_instance_ = new InstanceInfo();
  FeatureGroupInfo::default_instance_ = new FeatureGroupInfo();
  Instance::default_instance_ = new Instance();
  InstanceInfo::default_instance_->InitAsDefaultInstance();
  FeatureGroupInfo::default_instance_->InitAsDefaultInstance();
  Instance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2finstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2finstance_2eproto {
  StaticDescriptorInitializer_proto_2finstance_2eproto() {
    protobuf_AddDesc_proto_2finstance_2eproto();
  }
} static_descriptor_initializer_proto_2finstance_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* InstanceInfo_LabelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfo_LabelType_descriptor_;
}
bool InstanceInfo_LabelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InstanceInfo_LabelType InstanceInfo::EMPTY;
const InstanceInfo_LabelType InstanceInfo::BINARY;
const InstanceInfo_LabelType InstanceInfo::MULTICLASS;
const InstanceInfo_LabelType InstanceInfo::CONTINUOUS;
const InstanceInfo_LabelType InstanceInfo::LabelType_MIN;
const InstanceInfo_LabelType InstanceInfo::LabelType_MAX;
const int InstanceInfo::LabelType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InstanceInfo::kLabelTypeFieldNumber;
const int InstanceInfo::kAllGroupFieldNumber;
const int InstanceInfo::kIndividualGroupsFieldNumber;
#endif  // !_MSC_VER

InstanceInfo::InstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfo::InitAsDefaultInstance() {
  all_group_ = const_cast< ::PS::FeatureGroupInfo*>(&::PS::FeatureGroupInfo::default_instance());
}

InstanceInfo::InstanceInfo(const InstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  label_type_ = 1;
  all_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfo::~InstanceInfo() {
  SharedDtor();
}

void InstanceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete all_group_;
  }
}

void InstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfo_descriptor_;
}

const InstanceInfo& InstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finstance_2eproto();
  return *default_instance_;
}

InstanceInfo* InstanceInfo::default_instance_ = NULL;

InstanceInfo* InstanceInfo::New() const {
  return new InstanceInfo;
}

void InstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_type_ = 1;
    if (has_all_group()) {
      if (all_group_ != NULL) all_group_->::PS::FeatureGroupInfo::Clear();
    }
  }
  individual_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.InstanceInfo.LabelType label_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::InstanceInfo_LabelType_IsValid(value)) {
            set_label_type(static_cast< ::PS::InstanceInfo_LabelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_group;
        break;
      }

      // required .PS.FeatureGroupInfo all_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_individual_groups;
        break;
      }

      // repeated .PS.FeatureGroupInfo individual_groups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_individual_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_individual_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_individual_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.InstanceInfo.LabelType label_type = 1;
  if (has_label_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->label_type(), output);
  }

  // required .PS.FeatureGroupInfo all_group = 2;
  if (has_all_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_group(), output);
  }

  // repeated .PS.FeatureGroupInfo individual_groups = 3;
  for (int i = 0; i < this->individual_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->individual_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.InstanceInfo.LabelType label_type = 1;
  if (has_label_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->label_type(), target);
  }

  // required .PS.FeatureGroupInfo all_group = 2;
  if (has_all_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_group(), target);
  }

  // repeated .PS.FeatureGroupInfo individual_groups = 3;
  for (int i = 0; i < this->individual_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->individual_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.InstanceInfo.LabelType label_type = 1;
    if (has_label_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->label_type());
    }

    // required .PS.FeatureGroupInfo all_group = 2;
    if (has_all_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_group());
    }

  }
  // repeated .PS.FeatureGroupInfo individual_groups = 3;
  total_size += 1 * this->individual_groups_size();
  for (int i = 0; i < this->individual_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->individual_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfo::MergeFrom(const InstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  individual_groups_.MergeFrom(from.individual_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label_type()) {
      set_label_type(from.label_type());
    }
    if (from.has_all_group()) {
      mutable_all_group()->::PS::FeatureGroupInfo::MergeFrom(from.all_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfo::CopyFrom(const InstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_all_group()) {
    if (!this->all_group().IsInitialized()) return false;
  }
  for (int i = 0; i < individual_groups_size(); i++) {
    if (!this->individual_groups(i).IsInitialized()) return false;
  }
  return true;
}

void InstanceInfo::Swap(InstanceInfo* other) {
  if (other != this) {
    std::swap(label_type_, other->label_type_);
    std::swap(all_group_, other->all_group_);
    individual_groups_.Swap(&other->individual_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfo_descriptor_;
  metadata.reflection = InstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FeatureGroupInfo_FeatureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureGroupInfo_FeatureType_descriptor_;
}
bool FeatureGroupInfo_FeatureType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeatureGroupInfo_FeatureType FeatureGroupInfo::DENSE;
const FeatureGroupInfo_FeatureType FeatureGroupInfo::SPARSE;
const FeatureGroupInfo_FeatureType FeatureGroupInfo::SPARSE_BINARY;
const FeatureGroupInfo_FeatureType FeatureGroupInfo::FeatureType_MIN;
const FeatureGroupInfo_FeatureType FeatureGroupInfo::FeatureType_MAX;
const int FeatureGroupInfo::FeatureType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FeatureGroupInfo::kGroupIdFieldNumber;
const int FeatureGroupInfo::kFeatureTypeFieldNumber;
const int FeatureGroupInfo::kFeatureBeginFieldNumber;
const int FeatureGroupInfo::kFeatureEndFieldNumber;
const int FeatureGroupInfo::kNumInstancesFieldNumber;
const int FeatureGroupInfo::kNumEntriesFieldNumber;
#endif  // !_MSC_VER

FeatureGroupInfo::FeatureGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureGroupInfo::InitAsDefaultInstance() {
}

FeatureGroupInfo::FeatureGroupInfo(const FeatureGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  feature_type_ = 1;
  feature_begin_ = GOOGLE_ULONGLONG(18446744073709551615);
  feature_end_ = GOOGLE_ULONGLONG(0);
  num_instances_ = GOOGLE_ULONGLONG(0);
  num_entries_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureGroupInfo::~FeatureGroupInfo() {
  SharedDtor();
}

void FeatureGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureGroupInfo_descriptor_;
}

const FeatureGroupInfo& FeatureGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finstance_2eproto();
  return *default_instance_;
}

FeatureGroupInfo* FeatureGroupInfo::default_instance_ = NULL;

FeatureGroupInfo* FeatureGroupInfo::New() const {
  return new FeatureGroupInfo;
}

void FeatureGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0;
    feature_type_ = 1;
    feature_begin_ = GOOGLE_ULONGLONG(18446744073709551615);
    feature_end_ = GOOGLE_ULONGLONG(0);
    num_instances_ = GOOGLE_ULONGLONG(0);
    num_entries_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feature_type;
        break;
      }

      // required .PS.FeatureGroupInfo.FeatureType feature_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::FeatureGroupInfo_FeatureType_IsValid(value)) {
            set_feature_type(static_cast< ::PS::FeatureGroupInfo_FeatureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feature_begin;
        break;
      }

      // required uint64 feature_begin = 3 [default = 18446744073709551615];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &feature_begin_)));
          set_has_feature_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_feature_end;
        break;
      }

      // required uint64 feature_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &feature_end_)));
          set_has_feature_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_instances;
        break;
      }

      // required uint64 num_instances = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_instances_)));
          set_has_num_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_entries;
        break;
      }

      // required uint64 num_entries = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // required .PS.FeatureGroupInfo.FeatureType feature_type = 2;
  if (has_feature_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->feature_type(), output);
  }

  // required uint64 feature_begin = 3 [default = 18446744073709551615];
  if (has_feature_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->feature_begin(), output);
  }

  // required uint64 feature_end = 4;
  if (has_feature_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->feature_end(), output);
  }

  // required uint64 num_instances = 5;
  if (has_num_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->num_instances(), output);
  }

  // required uint64 num_entries = 6;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_entries(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // required .PS.FeatureGroupInfo.FeatureType feature_type = 2;
  if (has_feature_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->feature_type(), target);
  }

  // required uint64 feature_begin = 3 [default = 18446744073709551615];
  if (has_feature_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->feature_begin(), target);
  }

  // required uint64 feature_end = 4;
  if (has_feature_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->feature_end(), target);
  }

  // required uint64 num_instances = 5;
  if (has_num_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->num_instances(), target);
  }

  // required uint64 num_entries = 6;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_entries(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required .PS.FeatureGroupInfo.FeatureType feature_type = 2;
    if (has_feature_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature_type());
    }

    // required uint64 feature_begin = 3 [default = 18446744073709551615];
    if (has_feature_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->feature_begin());
    }

    // required uint64 feature_end = 4;
    if (has_feature_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->feature_end());
    }

    // required uint64 num_instances = 5;
    if (has_num_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_instances());
    }

    // required uint64 num_entries = 6;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_entries());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureGroupInfo::MergeFrom(const FeatureGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_feature_type()) {
      set_feature_type(from.feature_type());
    }
    if (from.has_feature_begin()) {
      set_feature_begin(from.feature_begin());
    }
    if (from.has_feature_end()) {
      set_feature_end(from.feature_end());
    }
    if (from.has_num_instances()) {
      set_num_instances(from.num_instances());
    }
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureGroupInfo::CopyFrom(const FeatureGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FeatureGroupInfo::Swap(FeatureGroupInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(feature_type_, other->feature_type_);
    std::swap(feature_begin_, other->feature_begin_);
    std::swap(feature_end_, other->feature_end_);
    std::swap(num_instances_, other->num_instances_);
    std::swap(num_entries_, other->num_entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureGroupInfo_descriptor_;
  metadata.reflection = FeatureGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instance::kLabelFieldNumber;
const int Instance::kFeatureIdFieldNumber;
const int Instance::kValueFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instance::SharedCtor() {
  _cached_size_ = 0;
  label_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  SharedDtor();
}

void Instance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finstance_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    label_ = 0;
  }
  feature_id_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feature_id;
        break;
      }

      // repeated int64 feature_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_feature_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_feature_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_feature_id;
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // repeated float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->label(), output);
  }

  // repeated int64 feature_id = 2;
  for (int i = 0; i < this->feature_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->feature_id(i), output);
  }

  // repeated float value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float label = 1;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->label(), target);
  }

  // repeated int64 feature_id = 2;
  for (int i = 0; i < this->feature_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->feature_id(i), target);
  }

  // repeated float value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float label = 1;
    if (has_label()) {
      total_size += 1 + 4;
    }

  }
  // repeated int64 feature_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->feature_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->feature_id(i));
    }
    total_size += 1 * this->feature_id_size() + data_size;
  }

  // repeated float value = 3;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_id_.MergeFrom(from.feature_id_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    feature_id_.Swap(&other->feature_id_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
