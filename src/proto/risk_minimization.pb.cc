// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/risk_minimization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/risk_minimization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* RiskMinProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskMinProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiskMinCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiskMinCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RiskMinCall_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto() {
  protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/risk_minimization.proto");
  GOOGLE_CHECK(file != NULL);
  RiskMinProgress_descriptor_ = file->message_type(0);
  static const int RiskMinProgress_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, objv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, relative_objv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, nnz_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, violation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, nnz_active_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, training_auc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, training_auc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, busy_time_),
  };
  RiskMinProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskMinProgress_descriptor_,
      RiskMinProgress::default_instance_,
      RiskMinProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskMinProgress));
  RiskMinCall_descriptor_ = file->message_type(1);
  static const int RiskMinCall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, feature_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, kkt_filter_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, kkt_filter_reset_),
  };
  RiskMinCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiskMinCall_descriptor_,
      RiskMinCall::default_instance_,
      RiskMinCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiskMinCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiskMinCall));
  RiskMinCall_Command_descriptor_ = RiskMinCall_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2frisk_5fminimization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskMinProgress_descriptor_, &RiskMinProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiskMinCall_descriptor_, &RiskMinCall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto() {
  delete RiskMinProgress::default_instance_;
  delete RiskMinProgress_reflection_;
  delete RiskMinCall::default_instance_;
  delete RiskMinCall_reflection_;
}

void protobuf_AddDesc_proto_2frisk_5fminimization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_proto_2frange_2eproto();
  ::PS::protobuf_AddDesc_proto_2fauc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035proto/risk_minimization.proto\022\002PS\032\021pro"
    "to/range.proto\032\017proto/auc.proto\"\325\001\n\017Risk"
    "MinProgress\022\014\n\004objv\030\001 \001(\001\022\025\n\rrelative_ob"
    "jv\030\002 \001(\001\022\r\n\005nnz_w\030\005 \001(\004\022\021\n\tviolation\030\006 \001"
    "(\001\022\026\n\016nnz_active_set\030\007 \001(\004\022\024\n\014training_a"
    "uc\030\010 \001(\001\022&\n\021training_auc_data\030\t \001(\0132\013.PS"
    ".AUCData\022\022\n\ntotal_time\030\n \001(\001\022\021\n\tbusy_tim"
    "e\030\013 \003(\001\"\202\002\n\013RiskMinCall\022$\n\003cmd\030\001 \002(\0162\027.P"
    "S.RiskMinCall.Command\022\030\n\003key\030\002 \001(\0132\013.PS."
    "PbRange\022\030\n\020feature_group_id\030\003 \001(\005\022\034\n\024kkt"
    "_filter_threshold\030\004 \001(\001\022\030\n\020kkt_filter_re"
    "set\030\005 \001(\010\"a\n\007Command\022\020\n\014PREPARE_DATA\020\001\022\020"
    "\n\014UPDATE_MODEL\020\002\022\025\n\021EVALUATE_PROGRESS\020\003\022"
    "\016\n\nSAVE_MODEL\020\004\022\013\n\007RECOVER\020\005", 548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/risk_minimization.proto", &protobuf_RegisterTypes);
  RiskMinProgress::default_instance_ = new RiskMinProgress();
  RiskMinCall::default_instance_ = new RiskMinCall();
  RiskMinProgress::default_instance_->InitAsDefaultInstance();
  RiskMinCall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2frisk_5fminimization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2frisk_5fminimization_2eproto {
  StaticDescriptorInitializer_proto_2frisk_5fminimization_2eproto() {
    protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  }
} static_descriptor_initializer_proto_2frisk_5fminimization_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RiskMinProgress::kObjvFieldNumber;
const int RiskMinProgress::kRelativeObjvFieldNumber;
const int RiskMinProgress::kNnzWFieldNumber;
const int RiskMinProgress::kViolationFieldNumber;
const int RiskMinProgress::kNnzActiveSetFieldNumber;
const int RiskMinProgress::kTrainingAucFieldNumber;
const int RiskMinProgress::kTrainingAucDataFieldNumber;
const int RiskMinProgress::kTotalTimeFieldNumber;
const int RiskMinProgress::kBusyTimeFieldNumber;
#endif  // !_MSC_VER

RiskMinProgress::RiskMinProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RiskMinProgress::InitAsDefaultInstance() {
  training_auc_data_ = const_cast< ::PS::AUCData*>(&::PS::AUCData::default_instance());
}

RiskMinProgress::RiskMinProgress(const RiskMinProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RiskMinProgress::SharedCtor() {
  _cached_size_ = 0;
  objv_ = 0;
  relative_objv_ = 0;
  nnz_w_ = GOOGLE_ULONGLONG(0);
  violation_ = 0;
  nnz_active_set_ = GOOGLE_ULONGLONG(0);
  training_auc_ = 0;
  training_auc_data_ = NULL;
  total_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskMinProgress::~RiskMinProgress() {
  SharedDtor();
}

void RiskMinProgress::SharedDtor() {
  if (this != default_instance_) {
    delete training_auc_data_;
  }
}

void RiskMinProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskMinProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskMinProgress_descriptor_;
}

const RiskMinProgress& RiskMinProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  return *default_instance_;
}

RiskMinProgress* RiskMinProgress::default_instance_ = NULL;

RiskMinProgress* RiskMinProgress::New() const {
  return new RiskMinProgress;
}

void RiskMinProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objv_ = 0;
    relative_objv_ = 0;
    nnz_w_ = GOOGLE_ULONGLONG(0);
    violation_ = 0;
    nnz_active_set_ = GOOGLE_ULONGLONG(0);
    training_auc_ = 0;
    if (has_training_auc_data()) {
      if (training_auc_data_ != NULL) training_auc_data_->::PS::AUCData::Clear();
    }
    total_time_ = 0;
  }
  busy_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskMinProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double objv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objv_)));
          set_has_objv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_relative_objv;
        break;
      }

      // optional double relative_objv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_relative_objv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_objv_)));
          set_has_relative_objv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nnz_w;
        break;
      }

      // optional uint64 nnz_w = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_w_)));
          set_has_nnz_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_violation;
        break;
      }

      // optional double violation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_violation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &violation_)));
          set_has_violation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nnz_active_set;
        break;
      }

      // optional uint64 nnz_active_set = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nnz_active_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nnz_active_set_)));
          set_has_nnz_active_set();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_training_auc;
        break;
      }

      // optional double training_auc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_training_auc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &training_auc_)));
          set_has_training_auc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_training_auc_data;
        break;
      }

      // optional .PS.AUCData training_auc_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_training_auc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_training_auc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_total_time;
        break;
      }

      // optional double total_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_busy_time;
        break;
      }

      // repeated double busy_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_busy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_busy_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_busy_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_busy_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RiskMinProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double objv = 1;
  if (has_objv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->objv(), output);
  }

  // optional double relative_objv = 2;
  if (has_relative_objv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->relative_objv(), output);
  }

  // optional uint64 nnz_w = 5;
  if (has_nnz_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nnz_w(), output);
  }

  // optional double violation = 6;
  if (has_violation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->violation(), output);
  }

  // optional uint64 nnz_active_set = 7;
  if (has_nnz_active_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->nnz_active_set(), output);
  }

  // optional double training_auc = 8;
  if (has_training_auc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->training_auc(), output);
  }

  // optional .PS.AUCData training_auc_data = 9;
  if (has_training_auc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->training_auc_data(), output);
  }

  // optional double total_time = 10;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->total_time(), output);
  }

  // repeated double busy_time = 11;
  for (int i = 0; i < this->busy_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->busy_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RiskMinProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double objv = 1;
  if (has_objv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->objv(), target);
  }

  // optional double relative_objv = 2;
  if (has_relative_objv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->relative_objv(), target);
  }

  // optional uint64 nnz_w = 5;
  if (has_nnz_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nnz_w(), target);
  }

  // optional double violation = 6;
  if (has_violation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->violation(), target);
  }

  // optional uint64 nnz_active_set = 7;
  if (has_nnz_active_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->nnz_active_set(), target);
  }

  // optional double training_auc = 8;
  if (has_training_auc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->training_auc(), target);
  }

  // optional .PS.AUCData training_auc_data = 9;
  if (has_training_auc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->training_auc_data(), target);
  }

  // optional double total_time = 10;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->total_time(), target);
  }

  // repeated double busy_time = 11;
  for (int i = 0; i < this->busy_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->busy_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RiskMinProgress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double objv = 1;
    if (has_objv()) {
      total_size += 1 + 8;
    }

    // optional double relative_objv = 2;
    if (has_relative_objv()) {
      total_size += 1 + 8;
    }

    // optional uint64 nnz_w = 5;
    if (has_nnz_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_w());
    }

    // optional double violation = 6;
    if (has_violation()) {
      total_size += 1 + 8;
    }

    // optional uint64 nnz_active_set = 7;
    if (has_nnz_active_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nnz_active_set());
    }

    // optional double training_auc = 8;
    if (has_training_auc()) {
      total_size += 1 + 8;
    }

    // optional .PS.AUCData training_auc_data = 9;
    if (has_training_auc_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->training_auc_data());
    }

    // optional double total_time = 10;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated double busy_time = 11;
  {
    int data_size = 0;
    data_size = 8 * this->busy_time_size();
    total_size += 1 * this->busy_time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskMinProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskMinProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskMinProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskMinProgress::MergeFrom(const RiskMinProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  busy_time_.MergeFrom(from.busy_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objv()) {
      set_objv(from.objv());
    }
    if (from.has_relative_objv()) {
      set_relative_objv(from.relative_objv());
    }
    if (from.has_nnz_w()) {
      set_nnz_w(from.nnz_w());
    }
    if (from.has_violation()) {
      set_violation(from.violation());
    }
    if (from.has_nnz_active_set()) {
      set_nnz_active_set(from.nnz_active_set());
    }
    if (from.has_training_auc()) {
      set_training_auc(from.training_auc());
    }
    if (from.has_training_auc_data()) {
      mutable_training_auc_data()->::PS::AUCData::MergeFrom(from.training_auc_data());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskMinProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskMinProgress::CopyFrom(const RiskMinProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskMinProgress::IsInitialized() const {

  return true;
}

void RiskMinProgress::Swap(RiskMinProgress* other) {
  if (other != this) {
    std::swap(objv_, other->objv_);
    std::swap(relative_objv_, other->relative_objv_);
    std::swap(nnz_w_, other->nnz_w_);
    std::swap(violation_, other->violation_);
    std::swap(nnz_active_set_, other->nnz_active_set_);
    std::swap(training_auc_, other->training_auc_);
    std::swap(training_auc_data_, other->training_auc_data_);
    std::swap(total_time_, other->total_time_);
    busy_time_.Swap(&other->busy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskMinProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskMinProgress_descriptor_;
  metadata.reflection = RiskMinProgress_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RiskMinCall_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskMinCall_Command_descriptor_;
}
bool RiskMinCall_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RiskMinCall_Command RiskMinCall::PREPARE_DATA;
const RiskMinCall_Command RiskMinCall::UPDATE_MODEL;
const RiskMinCall_Command RiskMinCall::EVALUATE_PROGRESS;
const RiskMinCall_Command RiskMinCall::SAVE_MODEL;
const RiskMinCall_Command RiskMinCall::RECOVER;
const RiskMinCall_Command RiskMinCall::Command_MIN;
const RiskMinCall_Command RiskMinCall::Command_MAX;
const int RiskMinCall::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RiskMinCall::kCmdFieldNumber;
const int RiskMinCall::kKeyFieldNumber;
const int RiskMinCall::kFeatureGroupIdFieldNumber;
const int RiskMinCall::kKktFilterThresholdFieldNumber;
const int RiskMinCall::kKktFilterResetFieldNumber;
#endif  // !_MSC_VER

RiskMinCall::RiskMinCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RiskMinCall::InitAsDefaultInstance() {
  key_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
}

RiskMinCall::RiskMinCall(const RiskMinCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RiskMinCall::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  key_ = NULL;
  feature_group_id_ = 0;
  kkt_filter_threshold_ = 0;
  kkt_filter_reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiskMinCall::~RiskMinCall() {
  SharedDtor();
}

void RiskMinCall::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void RiskMinCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiskMinCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiskMinCall_descriptor_;
}

const RiskMinCall& RiskMinCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2frisk_5fminimization_2eproto();
  return *default_instance_;
}

RiskMinCall* RiskMinCall::default_instance_ = NULL;

RiskMinCall* RiskMinCall::New() const {
  return new RiskMinCall;
}

void RiskMinCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
    if (has_key()) {
      if (key_ != NULL) key_->::PS::PbRange::Clear();
    }
    feature_group_id_ = 0;
    kkt_filter_threshold_ = 0;
    kkt_filter_reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiskMinCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.RiskMinCall.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::RiskMinCall_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::RiskMinCall_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional .PS.PbRange key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feature_group_id;
        break;
      }

      // optional int32 feature_group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_group_id_)));
          set_has_feature_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_kkt_filter_threshold;
        break;
      }

      // optional double kkt_filter_threshold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kkt_filter_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kkt_filter_threshold_)));
          set_has_kkt_filter_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kkt_filter_reset;
        break;
      }

      // optional bool kkt_filter_reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kkt_filter_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kkt_filter_reset_)));
          set_has_kkt_filter_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RiskMinCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.RiskMinCall.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(), output);
  }

  // optional int32 feature_group_id = 3;
  if (has_feature_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->feature_group_id(), output);
  }

  // optional double kkt_filter_threshold = 4;
  if (has_kkt_filter_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kkt_filter_threshold(), output);
  }

  // optional bool kkt_filter_reset = 5;
  if (has_kkt_filter_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->kkt_filter_reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RiskMinCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.RiskMinCall.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .PS.PbRange key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(), target);
  }

  // optional int32 feature_group_id = 3;
  if (has_feature_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->feature_group_id(), target);
  }

  // optional double kkt_filter_threshold = 4;
  if (has_kkt_filter_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kkt_filter_threshold(), target);
  }

  // optional bool kkt_filter_reset = 5;
  if (has_kkt_filter_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->kkt_filter_reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RiskMinCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.RiskMinCall.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .PS.PbRange key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

    // optional int32 feature_group_id = 3;
    if (has_feature_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feature_group_id());
    }

    // optional double kkt_filter_threshold = 4;
    if (has_kkt_filter_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool kkt_filter_reset = 5;
    if (has_kkt_filter_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiskMinCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiskMinCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiskMinCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiskMinCall::MergeFrom(const RiskMinCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_key()) {
      mutable_key()->::PS::PbRange::MergeFrom(from.key());
    }
    if (from.has_feature_group_id()) {
      set_feature_group_id(from.feature_group_id());
    }
    if (from.has_kkt_filter_threshold()) {
      set_kkt_filter_threshold(from.kkt_filter_threshold());
    }
    if (from.has_kkt_filter_reset()) {
      set_kkt_filter_reset(from.kkt_filter_reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiskMinCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiskMinCall::CopyFrom(const RiskMinCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiskMinCall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  return true;
}

void RiskMinCall::Swap(RiskMinCall* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(key_, other->key_);
    std::swap(feature_group_id_, other->feature_group_id_);
    std::swap(kkt_filter_threshold_, other->kkt_filter_threshold_);
    std::swap(kkt_filter_reset_, other->kkt_filter_reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiskMinCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiskMinCall_descriptor_;
  metadata.reflection = RiskMinCall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
