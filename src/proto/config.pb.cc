// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* AppConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AppConfig_AppType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DataConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataConfig_DataFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ParameterInitConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterInitConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ParameterInitConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BlockIteratorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockIteratorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockCoordL1LRConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockCoordL1LRConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LossConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LossConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LearnerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnerConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LearnerConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AggGradLearnerArg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AggGradLearnerArg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PenaltyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PenaltyConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fconfig_2eproto() {
  protobuf_AddDesc_proto_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/config.proto");
  GOOGLE_CHECK(file != NULL);
  AppConfig_descriptor_ = file->message_type(0);
  static const int AppConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, parameter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, training_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, init_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, model_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, learner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, block_iterator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, block_coord_l1lr_),
  };
  AppConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppConfig_descriptor_,
      AppConfig::default_instance_,
      AppConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppConfig));
  AppConfig_AppType_descriptor_ = AppConfig_descriptor_->enum_type(0);
  DataConfig_descriptor_ = file->message_type(1);
  static const int DataConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfig, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfig, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfig, range_),
  };
  DataConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataConfig_descriptor_,
      DataConfig::default_instance_,
      DataConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataConfig));
  DataConfig_DataFormat_descriptor_ = DataConfig_descriptor_->enum_type(0);
  ParameterInitConfig_descriptor_ = file->message_type(2);
  static const int ParameterInitConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, random_std_),
  };
  ParameterInitConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParameterInitConfig_descriptor_,
      ParameterInitConfig::default_instance_,
      ParameterInitConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterInitConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParameterInitConfig));
  ParameterInitConfig_Type_descriptor_ = ParameterInitConfig_descriptor_->enum_type(0);
  BlockIteratorConfig_descriptor_ = file->message_type(3);
  static const int BlockIteratorConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, example_block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, feature_block_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, random_feature_block_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, max_pass_of_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, max_block_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, epsilon_),
  };
  BlockIteratorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockIteratorConfig_descriptor_,
      BlockIteratorConfig::default_instance_,
      BlockIteratorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIteratorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockIteratorConfig));
  BlockCoordL1LRConfig_descriptor_ = file->message_type(4);
  static const int BlockCoordL1LRConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, delta_init_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, delta_max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, enable_multi_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, kkt_filter_threshold_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, auc_goodness_),
  };
  BlockCoordL1LRConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockCoordL1LRConfig_descriptor_,
      BlockCoordL1LRConfig::default_instance_,
      BlockCoordL1LRConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockCoordL1LRConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockCoordL1LRConfig));
  LossConfig_descriptor_ = file->message_type(5);
  static const int LossConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, type_),
  };
  LossConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LossConfig_descriptor_,
      LossConfig::default_instance_,
      LossConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LossConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LossConfig));
  LossConfig_Type_descriptor_ = LossConfig_descriptor_->enum_type(0);
  LearnerConfig_descriptor_ = file->message_type(6);
  static const int LearnerConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, learning_rate_),
  };
  LearnerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnerConfig_descriptor_,
      LearnerConfig::default_instance_,
      LearnerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnerConfig));
  LearnerConfig_Type_descriptor_ = LearnerConfig_descriptor_->enum_type(0);
  AggGradLearnerArg_descriptor_ = file->message_type(7);
  static const int AggGradLearnerArg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggGradLearnerArg, learning_rate_),
  };
  AggGradLearnerArg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AggGradLearnerArg_descriptor_,
      AggGradLearnerArg::default_instance_,
      AggGradLearnerArg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggGradLearnerArg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AggGradLearnerArg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AggGradLearnerArg));
  PenaltyConfig_descriptor_ = file->message_type(8);
  static const int PenaltyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, coefficient_),
  };
  PenaltyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PenaltyConfig_descriptor_,
      PenaltyConfig::default_instance_,
      PenaltyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PenaltyConfig));
  PenaltyConfig_Type_descriptor_ = PenaltyConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppConfig_descriptor_, &AppConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataConfig_descriptor_, &DataConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParameterInitConfig_descriptor_, &ParameterInitConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockIteratorConfig_descriptor_, &BlockIteratorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockCoordL1LRConfig_descriptor_, &BlockCoordL1LRConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LossConfig_descriptor_, &LossConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnerConfig_descriptor_, &LearnerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AggGradLearnerArg_descriptor_, &AggGradLearnerArg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PenaltyConfig_descriptor_, &PenaltyConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fconfig_2eproto() {
  delete AppConfig::default_instance_;
  delete AppConfig_reflection_;
  delete DataConfig::default_instance_;
  delete DataConfig_reflection_;
  delete ParameterInitConfig::default_instance_;
  delete ParameterInitConfig_reflection_;
  delete BlockIteratorConfig::default_instance_;
  delete BlockIteratorConfig_reflection_;
  delete BlockCoordL1LRConfig::default_instance_;
  delete BlockCoordL1LRConfig_reflection_;
  delete LossConfig::default_instance_;
  delete LossConfig_reflection_;
  delete LearnerConfig::default_instance_;
  delete LearnerConfig_reflection_;
  delete AggGradLearnerArg::default_instance_;
  delete AggGradLearnerArg_reflection_;
  delete PenaltyConfig::default_instance_;
  delete PenaltyConfig_reflection_;
}

void protobuf_AddDesc_proto_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_proto_2frange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/config.proto\022\002PS\032\021proto/range.pr"
    "oto\"\304\003\n\tAppConfig\022#\n\004type\030\001 \001(\0162\025.PS.App"
    "Config.AppType\022\020\n\010app_name\030\002 \001(\t\022\026\n\016para"
    "meter_name\030\003 \003(\t\022 \n\010training\030\n \001(\0132\016.PS."
    "DataConfig\022\'\n\006init_w\030\r \001(\0132\027.PS.Paramete"
    "rInitConfig\022$\n\014model_output\030\017 \001(\0132\016.PS.D"
    "ataConfig\022\034\n\004loss\030\024 \001(\0132\016.PS.LossConfig\022"
    "\"\n\007penalty\030\025 \001(\0132\021.PS.PenaltyConfig\022\"\n\007l"
    "earner\030\036 \001(\0132\021.PS.LearnerConfig\022/\n\016block"
    "_iterator\030( \001(\0132\027.PS.BlockIteratorConfig"
    "\0222\n\020block_coord_l1lr\030) \001(\0132\030.PS.BlockCoo"
    "rdL1LRConfig\",\n\007AppType\022\025\n\021RISK_MINIMIZA"
    "TION\020\001\022\n\n\006SKETCH\020\002\"\216\001\n\nDataConfig\022)\n\006for"
    "mat\030\001 \002(\0162\031.PS.DataConfig.DataFormat\022\r\n\005"
    "files\030\002 \003(\t\022\032\n\005range\030\003 \001(\0132\013.PS.PbRange\""
    "*\n\nDataFormat\022\007\n\003BIN\020\001\022\t\n\005PROTO\020\002\022\010\n\004TEX"
    "T\020\003\"\206\001\n\023ParameterInitConfig\0220\n\004type\030\001 \001("
    "\0162\034.PS.ParameterInitConfig.Type:\004ZERO\022\025\n"
    "\nrandom_std\030\002 \001(\001:\0011\"&\n\004Type\022\010\n\004ZERO\020\001\022\n"
    "\n\006RANDOM\020\002\022\010\n\004FILE\020\003\"\322\001\n\023BlockIteratorCo"
    "nfig\022\036\n\022example_block_size\030\001 \001(\003:\002-1\022\036\n\023"
    "feature_block_ratio\030\002 \001(\002:\0010\022(\n\032random_f"
    "eature_block_order\030\003 \001(\010:\004true\022\034\n\020max_pa"
    "ss_of_data\030\010 \001(\005:\00210\022\032\n\017max_block_delay\030"
    "\n \001(\005:\0010\022\027\n\007epsilon\030\013 \001(\001:\0060.0001\"\267\001\n\024Bl"
    "ockCoordL1LRConfig\022\033\n\020delta_init_value\030\001"
    " \001(\001:\0011\022\032\n\017delta_max_value\030\002 \001(\001:\0015\022\"\n\023e"
    "nable_multi_thread\030\004 \001(\010:\005false\022&\n\032kkt_f"
    "ilter_threshold_ratio\030\n \001(\001:\00210\022\032\n\014auc_g"
    "oodness\030\014 \001(\003:\0041000\"k\n\nLossConfig\022!\n\004typ"
    "e\030\001 \002(\0162\023.PS.LossConfig.Type\":\n\004Type\022\n\n\006"
    "SQUARE\020\001\022\t\n\005LOGIT\020\002\022\t\n\005HINGE\020\003\022\020\n\014SQUARE"
    "_HINGE\020\004\"\217\001\n\rLearnerConfig\022$\n\004type\030\001 \002(\016"
    "2\026.PS.LearnerConfig.Type\022\030\n\rlearning_rat"
    "e\030\002 \001(\002:\0011\">\n\004Type\022\024\n\020GRADIENT_DESCENT\020\001"
    "\022\025\n\021PROXIMAL_GRADIENT\020\002\022\t\n\005LBFGS\020\003\"-\n\021Ag"
    "gGradLearnerArg\022\030\n\rlearning_rate\030\001 \001(\002:\001"
    "1\"e\n\rPenaltyConfig\022$\n\004type\030\001 \002(\0162\026.PS.Pe"
    "naltyConfig.Type\022\026\n\013coefficient\030\002 \002(\002:\0010"
    "\"\026\n\004Type\022\006\n\002L1\020\001\022\006\n\002L2\020\002", 1584);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/config.proto", &protobuf_RegisterTypes);
  AppConfig::default_instance_ = new AppConfig();
  DataConfig::default_instance_ = new DataConfig();
  ParameterInitConfig::default_instance_ = new ParameterInitConfig();
  BlockIteratorConfig::default_instance_ = new BlockIteratorConfig();
  BlockCoordL1LRConfig::default_instance_ = new BlockCoordL1LRConfig();
  LossConfig::default_instance_ = new LossConfig();
  LearnerConfig::default_instance_ = new LearnerConfig();
  AggGradLearnerArg::default_instance_ = new AggGradLearnerArg();
  PenaltyConfig::default_instance_ = new PenaltyConfig();
  AppConfig::default_instance_->InitAsDefaultInstance();
  DataConfig::default_instance_->InitAsDefaultInstance();
  ParameterInitConfig::default_instance_->InitAsDefaultInstance();
  BlockIteratorConfig::default_instance_->InitAsDefaultInstance();
  BlockCoordL1LRConfig::default_instance_->InitAsDefaultInstance();
  LossConfig::default_instance_->InitAsDefaultInstance();
  LearnerConfig::default_instance_->InitAsDefaultInstance();
  AggGradLearnerArg::default_instance_->InitAsDefaultInstance();
  PenaltyConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fconfig_2eproto {
  StaticDescriptorInitializer_proto_2fconfig_2eproto() {
    protobuf_AddDesc_proto_2fconfig_2eproto();
  }
} static_descriptor_initializer_proto_2fconfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AppConfig_AppType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppConfig_AppType_descriptor_;
}
bool AppConfig_AppType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AppConfig_AppType AppConfig::RISK_MINIMIZATION;
const AppConfig_AppType AppConfig::SKETCH;
const AppConfig_AppType AppConfig::AppType_MIN;
const AppConfig_AppType AppConfig::AppType_MAX;
const int AppConfig::AppType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AppConfig::kTypeFieldNumber;
const int AppConfig::kAppNameFieldNumber;
const int AppConfig::kParameterNameFieldNumber;
const int AppConfig::kTrainingFieldNumber;
const int AppConfig::kInitWFieldNumber;
const int AppConfig::kModelOutputFieldNumber;
const int AppConfig::kLossFieldNumber;
const int AppConfig::kPenaltyFieldNumber;
const int AppConfig::kLearnerFieldNumber;
const int AppConfig::kBlockIteratorFieldNumber;
const int AppConfig::kBlockCoordL1LrFieldNumber;
#endif  // !_MSC_VER

AppConfig::AppConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppConfig::InitAsDefaultInstance() {
  training_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  init_w_ = const_cast< ::PS::ParameterInitConfig*>(&::PS::ParameterInitConfig::default_instance());
  model_output_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
  loss_ = const_cast< ::PS::LossConfig*>(&::PS::LossConfig::default_instance());
  penalty_ = const_cast< ::PS::PenaltyConfig*>(&::PS::PenaltyConfig::default_instance());
  learner_ = const_cast< ::PS::LearnerConfig*>(&::PS::LearnerConfig::default_instance());
  block_iterator_ = const_cast< ::PS::BlockIteratorConfig*>(&::PS::BlockIteratorConfig::default_instance());
  block_coord_l1lr_ = const_cast< ::PS::BlockCoordL1LRConfig*>(&::PS::BlockCoordL1LRConfig::default_instance());
}

AppConfig::AppConfig(const AppConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  training_ = NULL;
  init_w_ = NULL;
  model_output_ = NULL;
  loss_ = NULL;
  penalty_ = NULL;
  learner_ = NULL;
  block_iterator_ = NULL;
  block_coord_l1lr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppConfig::~AppConfig() {
  SharedDtor();
}

void AppConfig::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (this != default_instance_) {
    delete training_;
    delete init_w_;
    delete model_output_;
    delete loss_;
    delete penalty_;
    delete learner_;
    delete block_iterator_;
    delete block_coord_l1lr_;
  }
}

void AppConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppConfig_descriptor_;
}

const AppConfig& AppConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

AppConfig* AppConfig::default_instance_ = NULL;

AppConfig* AppConfig::New() const {
  return new AppConfig;
}

void AppConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::kEmptyString) {
        app_name_->clear();
      }
    }
    if (has_training()) {
      if (training_ != NULL) training_->::PS::DataConfig::Clear();
    }
    if (has_init_w()) {
      if (init_w_ != NULL) init_w_->::PS::ParameterInitConfig::Clear();
    }
    if (has_model_output()) {
      if (model_output_ != NULL) model_output_->::PS::DataConfig::Clear();
    }
    if (has_loss()) {
      if (loss_ != NULL) loss_->::PS::LossConfig::Clear();
    }
    if (has_penalty()) {
      if (penalty_ != NULL) penalty_->::PS::PenaltyConfig::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_learner()) {
      if (learner_ != NULL) learner_->::PS::LearnerConfig::Clear();
    }
    if (has_block_iterator()) {
      if (block_iterator_ != NULL) block_iterator_->::PS::BlockIteratorConfig::Clear();
    }
    if (has_block_coord_l1lr()) {
      if (block_coord_l1lr_ != NULL) block_coord_l1lr_->::PS::BlockCoordL1LRConfig::Clear();
    }
  }
  parameter_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.AppConfig.AppType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::AppConfig_AppType_IsValid(value)) {
            set_type(static_cast< ::PS::AppConfig_AppType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_name;
        break;
      }

      // optional string app_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter_name;
        break;
      }

      // repeated string parameter_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parameter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameter_name(this->parameter_name_size() - 1).data(),
            this->parameter_name(this->parameter_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter_name;
        if (input->ExpectTag(82)) goto parse_training;
        break;
      }

      // optional .PS.DataConfig training = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_training:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_training()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_init_w;
        break;
      }

      // optional .PS.ParameterInitConfig init_w = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_w()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_model_output;
        break;
      }

      // optional .PS.DataConfig model_output = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_loss;
        break;
      }

      // optional .PS.LossConfig loss = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_penalty;
        break;
      }

      // optional .PS.PenaltyConfig penalty = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_penalty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_penalty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_learner;
        break;
      }

      // optional .PS.LearnerConfig learner = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_learner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_block_iterator;
        break;
      }

      // optional .PS.BlockIteratorConfig block_iterator = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_iterator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_iterator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_block_coord_l1lr;
        break;
      }

      // optional .PS.BlockCoordL1LRConfig block_coord_l1lr = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_coord_l1lr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_coord_l1lr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.AppConfig.AppType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_name(), output);
  }

  // repeated string parameter_name = 3;
  for (int i = 0; i < this->parameter_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->parameter_name(i).data(), this->parameter_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameter_name(i), output);
  }

  // optional .PS.DataConfig training = 10;
  if (has_training()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->training(), output);
  }

  // optional .PS.ParameterInitConfig init_w = 13;
  if (has_init_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->init_w(), output);
  }

  // optional .PS.DataConfig model_output = 15;
  if (has_model_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->model_output(), output);
  }

  // optional .PS.LossConfig loss = 20;
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->loss(), output);
  }

  // optional .PS.PenaltyConfig penalty = 21;
  if (has_penalty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->penalty(), output);
  }

  // optional .PS.LearnerConfig learner = 30;
  if (has_learner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->learner(), output);
  }

  // optional .PS.BlockIteratorConfig block_iterator = 40;
  if (has_block_iterator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->block_iterator(), output);
  }

  // optional .PS.BlockCoordL1LRConfig block_coord_l1lr = 41;
  if (has_block_coord_l1lr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->block_coord_l1lr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.AppConfig.AppType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_name(), target);
  }

  // repeated string parameter_name = 3;
  for (int i = 0; i < this->parameter_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameter_name(i).data(), this->parameter_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->parameter_name(i), target);
  }

  // optional .PS.DataConfig training = 10;
  if (has_training()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->training(), target);
  }

  // optional .PS.ParameterInitConfig init_w = 13;
  if (has_init_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->init_w(), target);
  }

  // optional .PS.DataConfig model_output = 15;
  if (has_model_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->model_output(), target);
  }

  // optional .PS.LossConfig loss = 20;
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->loss(), target);
  }

  // optional .PS.PenaltyConfig penalty = 21;
  if (has_penalty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->penalty(), target);
  }

  // optional .PS.LearnerConfig learner = 30;
  if (has_learner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->learner(), target);
  }

  // optional .PS.BlockIteratorConfig block_iterator = 40;
  if (has_block_iterator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->block_iterator(), target);
  }

  // optional .PS.BlockCoordL1LRConfig block_coord_l1lr = 41;
  if (has_block_coord_l1lr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->block_coord_l1lr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.AppConfig.AppType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional .PS.DataConfig training = 10;
    if (has_training()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->training());
    }

    // optional .PS.ParameterInitConfig init_w = 13;
    if (has_init_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_w());
    }

    // optional .PS.DataConfig model_output = 15;
    if (has_model_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model_output());
    }

    // optional .PS.LossConfig loss = 20;
    if (has_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loss());
    }

    // optional .PS.PenaltyConfig penalty = 21;
    if (has_penalty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->penalty());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PS.LearnerConfig learner = 30;
    if (has_learner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->learner());
    }

    // optional .PS.BlockIteratorConfig block_iterator = 40;
    if (has_block_iterator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_iterator());
    }

    // optional .PS.BlockCoordL1LRConfig block_coord_l1lr = 41;
    if (has_block_coord_l1lr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_coord_l1lr());
    }

  }
  // repeated string parameter_name = 3;
  total_size += 1 * this->parameter_name_size();
  for (int i = 0; i < this->parameter_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parameter_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppConfig::MergeFrom(const AppConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_name_.MergeFrom(from.parameter_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_training()) {
      mutable_training()->::PS::DataConfig::MergeFrom(from.training());
    }
    if (from.has_init_w()) {
      mutable_init_w()->::PS::ParameterInitConfig::MergeFrom(from.init_w());
    }
    if (from.has_model_output()) {
      mutable_model_output()->::PS::DataConfig::MergeFrom(from.model_output());
    }
    if (from.has_loss()) {
      mutable_loss()->::PS::LossConfig::MergeFrom(from.loss());
    }
    if (from.has_penalty()) {
      mutable_penalty()->::PS::PenaltyConfig::MergeFrom(from.penalty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_learner()) {
      mutable_learner()->::PS::LearnerConfig::MergeFrom(from.learner());
    }
    if (from.has_block_iterator()) {
      mutable_block_iterator()->::PS::BlockIteratorConfig::MergeFrom(from.block_iterator());
    }
    if (from.has_block_coord_l1lr()) {
      mutable_block_coord_l1lr()->::PS::BlockCoordL1LRConfig::MergeFrom(from.block_coord_l1lr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppConfig::CopyFrom(const AppConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConfig::IsInitialized() const {

  if (has_training()) {
    if (!this->training().IsInitialized()) return false;
  }
  if (has_model_output()) {
    if (!this->model_output().IsInitialized()) return false;
  }
  if (has_loss()) {
    if (!this->loss().IsInitialized()) return false;
  }
  if (has_penalty()) {
    if (!this->penalty().IsInitialized()) return false;
  }
  if (has_learner()) {
    if (!this->learner().IsInitialized()) return false;
  }
  return true;
}

void AppConfig::Swap(AppConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(app_name_, other->app_name_);
    parameter_name_.Swap(&other->parameter_name_);
    std::swap(training_, other->training_);
    std::swap(init_w_, other->init_w_);
    std::swap(model_output_, other->model_output_);
    std::swap(loss_, other->loss_);
    std::swap(penalty_, other->penalty_);
    std::swap(learner_, other->learner_);
    std::swap(block_iterator_, other->block_iterator_);
    std::swap(block_coord_l1lr_, other->block_coord_l1lr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppConfig_descriptor_;
  metadata.reflection = AppConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DataConfig_DataFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataConfig_DataFormat_descriptor_;
}
bool DataConfig_DataFormat_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataConfig_DataFormat DataConfig::BIN;
const DataConfig_DataFormat DataConfig::PROTO;
const DataConfig_DataFormat DataConfig::TEXT;
const DataConfig_DataFormat DataConfig::DataFormat_MIN;
const DataConfig_DataFormat DataConfig::DataFormat_MAX;
const int DataConfig::DataFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataConfig::kFormatFieldNumber;
const int DataConfig::kFilesFieldNumber;
const int DataConfig::kRangeFieldNumber;
#endif  // !_MSC_VER

DataConfig::DataConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataConfig::InitAsDefaultInstance() {
  range_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
}

DataConfig::DataConfig(const DataConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataConfig::SharedCtor() {
  _cached_size_ = 0;
  format_ = 1;
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataConfig::~DataConfig() {
  SharedDtor();
}

void DataConfig::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
  }
}

void DataConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataConfig_descriptor_;
}

const DataConfig& DataConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

DataConfig* DataConfig::default_instance_ = NULL;

DataConfig* DataConfig::New() const {
  return new DataConfig;
}

void DataConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 1;
    if (has_range()) {
      if (range_ != NULL) range_->::PS::PbRange::Clear();
    }
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.DataConfig.DataFormat format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::DataConfig_DataFormat_IsValid(value)) {
            set_format(static_cast< ::PS::DataConfig_DataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        break;
      }

      // repeated string files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files(this->files_size() - 1).data(),
            this->files(this->files_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_files;
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }

      // optional .PS.PbRange range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.DataConfig.DataFormat format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->files(i).data(), this->files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->files(i), output);
  }

  // optional .PS.PbRange range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.DataConfig.DataFormat format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // repeated string files = 2;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->files(i), target);
  }

  // optional .PS.PbRange range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.DataConfig.DataFormat format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional .PS.PbRange range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  // repeated string files = 2;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataConfig::MergeFrom(const DataConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_range()) {
      mutable_range()->::PS::PbRange::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataConfig::CopyFrom(const DataConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void DataConfig::Swap(DataConfig* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    files_.Swap(&other->files_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataConfig_descriptor_;
  metadata.reflection = DataConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ParameterInitConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInitConfig_Type_descriptor_;
}
bool ParameterInitConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ParameterInitConfig_Type ParameterInitConfig::ZERO;
const ParameterInitConfig_Type ParameterInitConfig::RANDOM;
const ParameterInitConfig_Type ParameterInitConfig::FILE;
const ParameterInitConfig_Type ParameterInitConfig::Type_MIN;
const ParameterInitConfig_Type ParameterInitConfig::Type_MAX;
const int ParameterInitConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ParameterInitConfig::kTypeFieldNumber;
const int ParameterInitConfig::kRandomStdFieldNumber;
#endif  // !_MSC_VER

ParameterInitConfig::ParameterInitConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParameterInitConfig::InitAsDefaultInstance() {
}

ParameterInitConfig::ParameterInitConfig(const ParameterInitConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParameterInitConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  random_std_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterInitConfig::~ParameterInitConfig() {
  SharedDtor();
}

void ParameterInitConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParameterInitConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterInitConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterInitConfig_descriptor_;
}

const ParameterInitConfig& ParameterInitConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

ParameterInitConfig* ParameterInitConfig::default_instance_ = NULL;

ParameterInitConfig* ParameterInitConfig::New() const {
  return new ParameterInitConfig;
}

void ParameterInitConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    random_std_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParameterInitConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::ParameterInitConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::ParameterInitConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_random_std;
        break;
      }

      // optional double random_std = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_random_std:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &random_std_)));
          set_has_random_std();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParameterInitConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double random_std = 2 [default = 1];
  if (has_random_std()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->random_std(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParameterInitConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double random_std = 2 [default = 1];
  if (has_random_std()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->random_std(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParameterInitConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PS.ParameterInitConfig.Type type = 1 [default = ZERO];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double random_std = 2 [default = 1];
    if (has_random_std()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterInitConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParameterInitConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParameterInitConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParameterInitConfig::MergeFrom(const ParameterInitConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_random_std()) {
      set_random_std(from.random_std());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParameterInitConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterInitConfig::CopyFrom(const ParameterInitConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterInitConfig::IsInitialized() const {

  return true;
}

void ParameterInitConfig::Swap(ParameterInitConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(random_std_, other->random_std_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParameterInitConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterInitConfig_descriptor_;
  metadata.reflection = ParameterInitConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockIteratorConfig::kExampleBlockSizeFieldNumber;
const int BlockIteratorConfig::kFeatureBlockRatioFieldNumber;
const int BlockIteratorConfig::kRandomFeatureBlockOrderFieldNumber;
const int BlockIteratorConfig::kMaxPassOfDataFieldNumber;
const int BlockIteratorConfig::kMaxBlockDelayFieldNumber;
const int BlockIteratorConfig::kEpsilonFieldNumber;
#endif  // !_MSC_VER

BlockIteratorConfig::BlockIteratorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockIteratorConfig::InitAsDefaultInstance() {
}

BlockIteratorConfig::BlockIteratorConfig(const BlockIteratorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockIteratorConfig::SharedCtor() {
  _cached_size_ = 0;
  example_block_size_ = GOOGLE_LONGLONG(-1);
  feature_block_ratio_ = 0;
  random_feature_block_order_ = true;
  max_pass_of_data_ = 10;
  max_block_delay_ = 0;
  epsilon_ = 0.0001;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockIteratorConfig::~BlockIteratorConfig() {
  SharedDtor();
}

void BlockIteratorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockIteratorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockIteratorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockIteratorConfig_descriptor_;
}

const BlockIteratorConfig& BlockIteratorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

BlockIteratorConfig* BlockIteratorConfig::default_instance_ = NULL;

BlockIteratorConfig* BlockIteratorConfig::New() const {
  return new BlockIteratorConfig;
}

void BlockIteratorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    example_block_size_ = GOOGLE_LONGLONG(-1);
    feature_block_ratio_ = 0;
    random_feature_block_order_ = true;
    max_pass_of_data_ = 10;
    max_block_delay_ = 0;
    epsilon_ = 0.0001;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockIteratorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 example_block_size = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &example_block_size_)));
          set_has_example_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_feature_block_ratio;
        break;
      }

      // optional float feature_block_ratio = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feature_block_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_block_ratio_)));
          set_has_feature_block_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_random_feature_block_order;
        break;
      }

      // optional bool random_feature_block_order = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_feature_block_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_feature_block_order_)));
          set_has_random_feature_block_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_pass_of_data;
        break;
      }

      // optional int32 max_pass_of_data = 8 [default = 10];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_pass_of_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pass_of_data_)));
          set_has_max_pass_of_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_block_delay;
        break;
      }

      // optional int32 max_block_delay = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_block_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_block_delay_)));
          set_has_max_block_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 11 [default = 0.0001];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockIteratorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 example_block_size = 1 [default = -1];
  if (has_example_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->example_block_size(), output);
  }

  // optional float feature_block_ratio = 2 [default = 0];
  if (has_feature_block_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->feature_block_ratio(), output);
  }

  // optional bool random_feature_block_order = 3 [default = true];
  if (has_random_feature_block_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->random_feature_block_order(), output);
  }

  // optional int32 max_pass_of_data = 8 [default = 10];
  if (has_max_pass_of_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_pass_of_data(), output);
  }

  // optional int32 max_block_delay = 10 [default = 0];
  if (has_max_block_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_block_delay(), output);
  }

  // optional double epsilon = 11 [default = 0.0001];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->epsilon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockIteratorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 example_block_size = 1 [default = -1];
  if (has_example_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->example_block_size(), target);
  }

  // optional float feature_block_ratio = 2 [default = 0];
  if (has_feature_block_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->feature_block_ratio(), target);
  }

  // optional bool random_feature_block_order = 3 [default = true];
  if (has_random_feature_block_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->random_feature_block_order(), target);
  }

  // optional int32 max_pass_of_data = 8 [default = 10];
  if (has_max_pass_of_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_pass_of_data(), target);
  }

  // optional int32 max_block_delay = 10 [default = 0];
  if (has_max_block_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_block_delay(), target);
  }

  // optional double epsilon = 11 [default = 0.0001];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->epsilon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockIteratorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 example_block_size = 1 [default = -1];
    if (has_example_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->example_block_size());
    }

    // optional float feature_block_ratio = 2 [default = 0];
    if (has_feature_block_ratio()) {
      total_size += 1 + 4;
    }

    // optional bool random_feature_block_order = 3 [default = true];
    if (has_random_feature_block_order()) {
      total_size += 1 + 1;
    }

    // optional int32 max_pass_of_data = 8 [default = 10];
    if (has_max_pass_of_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_pass_of_data());
    }

    // optional int32 max_block_delay = 10 [default = 0];
    if (has_max_block_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_block_delay());
    }

    // optional double epsilon = 11 [default = 0.0001];
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockIteratorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockIteratorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockIteratorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockIteratorConfig::MergeFrom(const BlockIteratorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_example_block_size()) {
      set_example_block_size(from.example_block_size());
    }
    if (from.has_feature_block_ratio()) {
      set_feature_block_ratio(from.feature_block_ratio());
    }
    if (from.has_random_feature_block_order()) {
      set_random_feature_block_order(from.random_feature_block_order());
    }
    if (from.has_max_pass_of_data()) {
      set_max_pass_of_data(from.max_pass_of_data());
    }
    if (from.has_max_block_delay()) {
      set_max_block_delay(from.max_block_delay());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockIteratorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIteratorConfig::CopyFrom(const BlockIteratorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIteratorConfig::IsInitialized() const {

  return true;
}

void BlockIteratorConfig::Swap(BlockIteratorConfig* other) {
  if (other != this) {
    std::swap(example_block_size_, other->example_block_size_);
    std::swap(feature_block_ratio_, other->feature_block_ratio_);
    std::swap(random_feature_block_order_, other->random_feature_block_order_);
    std::swap(max_pass_of_data_, other->max_pass_of_data_);
    std::swap(max_block_delay_, other->max_block_delay_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockIteratorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockIteratorConfig_descriptor_;
  metadata.reflection = BlockIteratorConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockCoordL1LRConfig::kDeltaInitValueFieldNumber;
const int BlockCoordL1LRConfig::kDeltaMaxValueFieldNumber;
const int BlockCoordL1LRConfig::kEnableMultiThreadFieldNumber;
const int BlockCoordL1LRConfig::kKktFilterThresholdRatioFieldNumber;
const int BlockCoordL1LRConfig::kAucGoodnessFieldNumber;
#endif  // !_MSC_VER

BlockCoordL1LRConfig::BlockCoordL1LRConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockCoordL1LRConfig::InitAsDefaultInstance() {
}

BlockCoordL1LRConfig::BlockCoordL1LRConfig(const BlockCoordL1LRConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockCoordL1LRConfig::SharedCtor() {
  _cached_size_ = 0;
  delta_init_value_ = 1;
  delta_max_value_ = 5;
  enable_multi_thread_ = false;
  kkt_filter_threshold_ratio_ = 10;
  auc_goodness_ = GOOGLE_LONGLONG(1000);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockCoordL1LRConfig::~BlockCoordL1LRConfig() {
  SharedDtor();
}

void BlockCoordL1LRConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockCoordL1LRConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockCoordL1LRConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockCoordL1LRConfig_descriptor_;
}

const BlockCoordL1LRConfig& BlockCoordL1LRConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

BlockCoordL1LRConfig* BlockCoordL1LRConfig::default_instance_ = NULL;

BlockCoordL1LRConfig* BlockCoordL1LRConfig::New() const {
  return new BlockCoordL1LRConfig;
}

void BlockCoordL1LRConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delta_init_value_ = 1;
    delta_max_value_ = 5;
    enable_multi_thread_ = false;
    kkt_filter_threshold_ratio_ = 10;
    auc_goodness_ = GOOGLE_LONGLONG(1000);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockCoordL1LRConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double delta_init_value = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_init_value_)));
          set_has_delta_init_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_delta_max_value;
        break;
      }

      // optional double delta_max_value = 2 [default = 5];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_max_value_)));
          set_has_delta_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enable_multi_thread;
        break;
      }

      // optional bool enable_multi_thread = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_multi_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_multi_thread_)));
          set_has_enable_multi_thread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_kkt_filter_threshold_ratio;
        break;
      }

      // optional double kkt_filter_threshold_ratio = 10 [default = 10];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kkt_filter_threshold_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kkt_filter_threshold_ratio_)));
          set_has_kkt_filter_threshold_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_auc_goodness;
        break;
      }

      // optional int64 auc_goodness = 12 [default = 1000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auc_goodness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &auc_goodness_)));
          set_has_auc_goodness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockCoordL1LRConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double delta_init_value = 1 [default = 1];
  if (has_delta_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->delta_init_value(), output);
  }

  // optional double delta_max_value = 2 [default = 5];
  if (has_delta_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delta_max_value(), output);
  }

  // optional bool enable_multi_thread = 4 [default = false];
  if (has_enable_multi_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_multi_thread(), output);
  }

  // optional double kkt_filter_threshold_ratio = 10 [default = 10];
  if (has_kkt_filter_threshold_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kkt_filter_threshold_ratio(), output);
  }

  // optional int64 auc_goodness = 12 [default = 1000];
  if (has_auc_goodness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->auc_goodness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockCoordL1LRConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double delta_init_value = 1 [default = 1];
  if (has_delta_init_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->delta_init_value(), target);
  }

  // optional double delta_max_value = 2 [default = 5];
  if (has_delta_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delta_max_value(), target);
  }

  // optional bool enable_multi_thread = 4 [default = false];
  if (has_enable_multi_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_multi_thread(), target);
  }

  // optional double kkt_filter_threshold_ratio = 10 [default = 10];
  if (has_kkt_filter_threshold_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kkt_filter_threshold_ratio(), target);
  }

  // optional int64 auc_goodness = 12 [default = 1000];
  if (has_auc_goodness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->auc_goodness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockCoordL1LRConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double delta_init_value = 1 [default = 1];
    if (has_delta_init_value()) {
      total_size += 1 + 8;
    }

    // optional double delta_max_value = 2 [default = 5];
    if (has_delta_max_value()) {
      total_size += 1 + 8;
    }

    // optional bool enable_multi_thread = 4 [default = false];
    if (has_enable_multi_thread()) {
      total_size += 1 + 1;
    }

    // optional double kkt_filter_threshold_ratio = 10 [default = 10];
    if (has_kkt_filter_threshold_ratio()) {
      total_size += 1 + 8;
    }

    // optional int64 auc_goodness = 12 [default = 1000];
    if (has_auc_goodness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->auc_goodness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockCoordL1LRConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockCoordL1LRConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockCoordL1LRConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockCoordL1LRConfig::MergeFrom(const BlockCoordL1LRConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta_init_value()) {
      set_delta_init_value(from.delta_init_value());
    }
    if (from.has_delta_max_value()) {
      set_delta_max_value(from.delta_max_value());
    }
    if (from.has_enable_multi_thread()) {
      set_enable_multi_thread(from.enable_multi_thread());
    }
    if (from.has_kkt_filter_threshold_ratio()) {
      set_kkt_filter_threshold_ratio(from.kkt_filter_threshold_ratio());
    }
    if (from.has_auc_goodness()) {
      set_auc_goodness(from.auc_goodness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockCoordL1LRConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockCoordL1LRConfig::CopyFrom(const BlockCoordL1LRConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockCoordL1LRConfig::IsInitialized() const {

  return true;
}

void BlockCoordL1LRConfig::Swap(BlockCoordL1LRConfig* other) {
  if (other != this) {
    std::swap(delta_init_value_, other->delta_init_value_);
    std::swap(delta_max_value_, other->delta_max_value_);
    std::swap(enable_multi_thread_, other->enable_multi_thread_);
    std::swap(kkt_filter_threshold_ratio_, other->kkt_filter_threshold_ratio_);
    std::swap(auc_goodness_, other->auc_goodness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockCoordL1LRConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockCoordL1LRConfig_descriptor_;
  metadata.reflection = BlockCoordL1LRConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossConfig_Type_descriptor_;
}
bool LossConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LossConfig_Type LossConfig::SQUARE;
const LossConfig_Type LossConfig::LOGIT;
const LossConfig_Type LossConfig::HINGE;
const LossConfig_Type LossConfig::SQUARE_HINGE;
const LossConfig_Type LossConfig::Type_MIN;
const LossConfig_Type LossConfig::Type_MAX;
const int LossConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LossConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

LossConfig::LossConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LossConfig::InitAsDefaultInstance() {
}

LossConfig::LossConfig(const LossConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LossConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LossConfig::~LossConfig() {
  SharedDtor();
}

void LossConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LossConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LossConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LossConfig_descriptor_;
}

const LossConfig& LossConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

LossConfig* LossConfig::default_instance_ = NULL;

LossConfig* LossConfig::New() const {
  return new LossConfig;
}

void LossConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LossConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.LossConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LossConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::LossConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LossConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.LossConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LossConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.LossConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LossConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.LossConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LossConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LossConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LossConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LossConfig::MergeFrom(const LossConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LossConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossConfig::CopyFrom(const LossConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LossConfig::Swap(LossConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LossConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LossConfig_descriptor_;
  metadata.reflection = LossConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LearnerConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnerConfig_Type_descriptor_;
}
bool LearnerConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LearnerConfig_Type LearnerConfig::GRADIENT_DESCENT;
const LearnerConfig_Type LearnerConfig::PROXIMAL_GRADIENT;
const LearnerConfig_Type LearnerConfig::LBFGS;
const LearnerConfig_Type LearnerConfig::Type_MIN;
const LearnerConfig_Type LearnerConfig::Type_MAX;
const int LearnerConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LearnerConfig::kTypeFieldNumber;
const int LearnerConfig::kLearningRateFieldNumber;
#endif  // !_MSC_VER

LearnerConfig::LearnerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnerConfig::InitAsDefaultInstance() {
}

LearnerConfig::LearnerConfig(const LearnerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnerConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  learning_rate_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnerConfig::~LearnerConfig() {
  SharedDtor();
}

void LearnerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LearnerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnerConfig_descriptor_;
}

const LearnerConfig& LearnerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

LearnerConfig* LearnerConfig::default_instance_ = NULL;

LearnerConfig* LearnerConfig::New() const {
  return new LearnerConfig;
}

void LearnerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    learning_rate_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.LearnerConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::LearnerConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::LearnerConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_learning_rate;
        break;
      }

      // optional float learning_rate = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_learning_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
          set_has_learning_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.LearnerConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float learning_rate = 2 [default = 1];
  if (has_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->learning_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.LearnerConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float learning_rate = 2 [default = 1];
  if (has_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->learning_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.LearnerConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float learning_rate = 2 [default = 1];
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnerConfig::MergeFrom(const LearnerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_learning_rate()) {
      set_learning_rate(from.learning_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnerConfig::CopyFrom(const LearnerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LearnerConfig::Swap(LearnerConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(learning_rate_, other->learning_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnerConfig_descriptor_;
  metadata.reflection = LearnerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AggGradLearnerArg::kLearningRateFieldNumber;
#endif  // !_MSC_VER

AggGradLearnerArg::AggGradLearnerArg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AggGradLearnerArg::InitAsDefaultInstance() {
}

AggGradLearnerArg::AggGradLearnerArg(const AggGradLearnerArg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AggGradLearnerArg::SharedCtor() {
  _cached_size_ = 0;
  learning_rate_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AggGradLearnerArg::~AggGradLearnerArg() {
  SharedDtor();
}

void AggGradLearnerArg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AggGradLearnerArg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AggGradLearnerArg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggGradLearnerArg_descriptor_;
}

const AggGradLearnerArg& AggGradLearnerArg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

AggGradLearnerArg* AggGradLearnerArg::default_instance_ = NULL;

AggGradLearnerArg* AggGradLearnerArg::New() const {
  return new AggGradLearnerArg;
}

void AggGradLearnerArg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    learning_rate_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AggGradLearnerArg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float learning_rate = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &learning_rate_)));
          set_has_learning_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AggGradLearnerArg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float learning_rate = 1 [default = 1];
  if (has_learning_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->learning_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AggGradLearnerArg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float learning_rate = 1 [default = 1];
  if (has_learning_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->learning_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AggGradLearnerArg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float learning_rate = 1 [default = 1];
    if (has_learning_rate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AggGradLearnerArg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AggGradLearnerArg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AggGradLearnerArg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AggGradLearnerArg::MergeFrom(const AggGradLearnerArg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_learning_rate()) {
      set_learning_rate(from.learning_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AggGradLearnerArg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggGradLearnerArg::CopyFrom(const AggGradLearnerArg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggGradLearnerArg::IsInitialized() const {

  return true;
}

void AggGradLearnerArg::Swap(AggGradLearnerArg* other) {
  if (other != this) {
    std::swap(learning_rate_, other->learning_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AggGradLearnerArg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AggGradLearnerArg_descriptor_;
  metadata.reflection = AggGradLearnerArg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PenaltyConfig_Type_descriptor_;
}
bool PenaltyConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PenaltyConfig_Type PenaltyConfig::L1;
const PenaltyConfig_Type PenaltyConfig::L2;
const PenaltyConfig_Type PenaltyConfig::Type_MIN;
const PenaltyConfig_Type PenaltyConfig::Type_MAX;
const int PenaltyConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PenaltyConfig::kTypeFieldNumber;
const int PenaltyConfig::kCoefficientFieldNumber;
#endif  // !_MSC_VER

PenaltyConfig::PenaltyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PenaltyConfig::InitAsDefaultInstance() {
}

PenaltyConfig::PenaltyConfig(const PenaltyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PenaltyConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  coefficient_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PenaltyConfig::~PenaltyConfig() {
  SharedDtor();
}

void PenaltyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PenaltyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PenaltyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PenaltyConfig_descriptor_;
}

const PenaltyConfig& PenaltyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fconfig_2eproto();
  return *default_instance_;
}

PenaltyConfig* PenaltyConfig::default_instance_ = NULL;

PenaltyConfig* PenaltyConfig::New() const {
  return new PenaltyConfig;
}

void PenaltyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    coefficient_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PenaltyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.PenaltyConfig.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::PenaltyConfig_Type_IsValid(value)) {
            set_type(static_cast< ::PS::PenaltyConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_coefficient;
        break;
      }

      // required float coefficient = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PenaltyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.PenaltyConfig.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required float coefficient = 2 [default = 0];
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->coefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PenaltyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.PenaltyConfig.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required float coefficient = 2 [default = 0];
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->coefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PenaltyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.PenaltyConfig.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required float coefficient = 2 [default = 0];
    if (has_coefficient()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PenaltyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PenaltyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PenaltyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PenaltyConfig::MergeFrom(const PenaltyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PenaltyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PenaltyConfig::CopyFrom(const PenaltyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenaltyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PenaltyConfig::Swap(PenaltyConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PenaltyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PenaltyConfig_descriptor_;
  metadata.reflection = PenaltyConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
